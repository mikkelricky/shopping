#!/usr/bin/env bash
set -o errexit -o errtrace -o noclobber -o nounset -o pipefail
IFS=$'\n\t'

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
project_dir=$(cd "$(dirname "$script_dir")" && pwd)

tag=${1:-}
if [ -z "$tag" ]; then
  (>&2 echo "Usage: $0 tag")
  exit
fi

section () {
    bold=$(tput -Txterm-256color bold)
    normal=$(tput -Txterm-256color sgr0)

    echo "${bold}$@${normal}"
}

cd "$project_dir"

# Configuration start

app_name=shopping
# Edit release-exclude.txt to exclude files and folder from release package.

# Configuration end

git config --global --add safe.directory "$PWD"
if ! git diff --exit-code composer.json; then
  (>&2 echo; echo composer.json is changed. Aborting.)
  exit 1
fi

section "Settings version (${tag}) in composer.json"
composer config version "${tag}"

section "Building release"

# Build release start

docker compose run --rm --env AP_ENV=prod composer install --no-dev --classmap-authoritative
docker compose run --rm --env AP_ENV=prod node npm install
docker compose run --rm --env AP_ENV=prod node npm run build

# Build release end

section "Packaging release"

# Package release
release_dir=release
target_dir="$release_dir/$app_name"
mkdir -p "$target_dir"

rsync --archive --compress --filter=':- .gitignore' --exclude-from "$script_dir/release-exclude.txt" . "$target_dir"
# Copy folders ignored by git
# rsync --verbose --archive --compress vendor public "$target_dir"
rsync --archive --compress public vendor "$target_dir"

# Replace %%VERSION%% with actual version in build
find $target_dir -type f -print0 | xargs -0 sed -i "s/%%VERSION%%/${tag}/g"

# Strip any leading `dev-` from tag name in package name.
name="${app_name}-${tag#dev-}.tar.gz"
[ ! -e "$name" ] || rm "$name"
tar --create --file "$name" -C "$release_dir" $app_name
sha256sum "$name" >| checksum.txt

section "Cleaning up"
# Clean up
rm -fr $release_dir

git checkout composer.json

section "Release content ($name)"

tar tvf "$name" | grep -v '/$'
